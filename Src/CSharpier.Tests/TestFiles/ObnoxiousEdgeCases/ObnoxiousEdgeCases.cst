// these are here so we can see how they change over time, see https://github.com/belav/csharpier/issues/272
// try to clean these up if you are modifying formatting that affects them.
class ClassName
{
    public static object? FormatValue<[DynamicallyAccessedMembers(
            DynamicallyAccessedMemberTypes.All
        )]
        T>(T value, CultureInfo? culture = null) { }

    public readonly StackObjectPool<Dictionary<
            object,
            KeyedItemInfo
        >> KeyedItemInfoDictionaryPool_____;

    internal StackObjectPool<Dictionary<
            object,
            KeyedItemInfo
        >> KeyedItemInfoDictionaryPool { get; } =
        new StackObjectPool<Dictionary<object, KeyedItemInfo>>(
            maxPreservedItems: 10,
            () => new Dictionary<object, KeyedItemInfo>()
        );

    RenderFragment<AuthenticationState> customNotAuthorized = state =>
        builder => builder.AddContent(0, $"Go away, {state.User.Identity.Name}");

    public List<(ClaimsPrincipal user, object resource, IEnumerable<IAuthorizationRequirement> requirements)> AuthorizeCalls { get; } =
        new List<(ClaimsPrincipal user, object resource, IEnumerable<IAuthorizationRequirement> requirements)>();

    private static readonly Action<ILogger, string, string, Exception> _displayingNotFound =
        LoggerMessage.Define<string, string>(
            LogLevel.Debug,
            new EventId(1, "DisplayingNotFound"),
            $"Displaying {nameof(NotFound)} because path '{{Path}}' with base URI '{{BaseUri}}' does not match any component route"
        );

    private static readonly Action<
        ILogger,
        Type,
        string,
        string,
        Exception
    > _navigatingToComponent = LoggerMessage.Define<Type, string, string>(
        LogLevel.Debug,
        new EventId(2, "NavigatingToComponent"),
        "Navigating to component {ComponentType} in response to path '{Path}' with base URI '{BaseUri}'"
    );

    public void MethodName()
    {
        builder_________________.OpenComponent<SecondCascadingParameterConsumerComponent<
                string,
                int
            >>(0);
    }

    public static IRemoteAuthenticationBuilder<
        RemoteAuthenticationState,
        RemoteUserAccount
    > AddAccountClaimsPrincipalFactory<[DynamicallyAccessedMembers(
            DynamicallyAccessedMemberTypes.PublicConstructors
        )]
        TAccountClaimsPrincipalFactory>(
        this IRemoteAuthenticationBuilder<RemoteAuthenticationState, RemoteUserAccount> builder
    ) where TAccountClaimsPrincipalFactory : AccountClaimsPrincipalFactory<RemoteUserAccount> =>
        builder.AddAccountClaimsPrincipalFactory<
            RemoteAuthenticationState,
            RemoteUserAccount,
            TAccountClaimsPrincipalFactory
        >();

    private static readonly Action<IApplicationBuilder> ActionNotImplemented =
        new Action<IApplicationBuilder>(
            _ =>
            {
                throw new NotImplementedException();
            }
        );
}
