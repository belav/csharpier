public class ClassName
{
    public static readonly EventCallback Empty = new EventCallback(null, (Action)(() => { }));
    public static readonly EventCallback<TValue> Empty = new EventCallback<TValue>(
        null,
        (Action)(() => { })
    );
    private static readonly Action _callbackCompleted = () => { };

    public void MethodName()
    {
        this.Where(() => true);
        this.Where(async () => true);
        this.Where(static () => true);
        this.Where(async static () => true);
        this.SomeMethod(
            (
                a11111111111111111111111111111,
                b222222222222222222222222222222
            ) => someLongNameThatWillDoStuff
        );

        var task = Task.Factory.StartNew(
            async () =>
            {
                return await new WebClient().DownloadStringTaskAsync____________________(
                    "http://example.com"
                );
            }
        );

        Action find = () => EntryPointDiscoverer.FindStaticEntryMethod(
            typeof(IEnumerable<>).Assembly
        );

        var @delegate = (Action<string>)((s) => { });

        var reusedCommand = new Command("reused") { Handler = CommandHandler.Create(() => { }) };

        var component = new EventComponent
        {
            OnArbitraryDelegateEvent = (Action<EventArgs, string>)((x, y) => { }),
        };

        Parallel.For(0, OuterLoopCount, () => schedulers, _parallelAction, (s) => { });

        var reusedCommand = new Command("reused")
        {
            Handler = CommandHandler.Create(
                () =>
                {
                    doSomething();
                }
            )
        };
    }
}
