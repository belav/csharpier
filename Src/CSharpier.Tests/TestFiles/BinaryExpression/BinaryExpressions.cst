class TestClass
{
    void TestMethod()
    {
        var someVar = "a string" + thatIsJust(shortEnough) + "to not wrap";

        var someLongVariableName =
            "a long string with just concatenation"
            + "will break this way"
            + "because of reasons such as the fact it is too long";

        var someLongVariableName =
            "a really loooooooooooooooong string"
            + someMethodCall("with long args")
            + "really long string";

        CallSomeLongMethodWithStringConcatenationThatShouldNotBreak(
            csharpDirectory + ".generated.cs",
            output.ToString()
        );

        var commentsDontBreakBinary =
            // shouldn't break next line
            true || false;

        var commentsDontBreakBinary =
            // shouldn't break next line
            // shouldn't break next line
            true || false;

        var directivesDontBreakBinary =
#pragma
            true || false;

        var x =
            query
            && (
                currentChar == '='
                || currentChar == '<'
                || currentChar == '!'
                || currentChar == '>'
                || currentChar == '|'
                || currentChar == '&'
            );

        var x =
            node is BinaryExpressionSyntax
            || node is IsPatternExpressionSyntax isPattern
            && isPattern.Pattern is ConstantPatternSyntax;

        var x =
            (
                optionsProvider != null
                && optionsProvider.TryGetDiagnosticValue(
                    tree,
                    diagnosticId,
                    CancellationToken.None,
                    out _
                )
            )
            || (
                diagnosticCategory != null
                && analyzerConfigOptions.TryGetValue(
                    GetCategoryBasedDotnetAnalyzerDiagnosticSeverityKey(diagnosticCategory),
                    out _
                )
            )
            || analyzerConfigOptions.TryGetValue(DotnetAnalyzerDiagnosticSeverityKey, out _);
    }
}
