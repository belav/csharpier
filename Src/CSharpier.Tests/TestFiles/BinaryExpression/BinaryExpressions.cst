class TestClass
{
    public string SomeProperty =>
        "someLongStringValue__________________________"
        + "someOtherLongStringValue_______________________________";

    void TestMethod()
    {
        var someVar = "a string" + thatIsJust(shortEnough) + "to not wrap";

        var someLongVariableName =
            "a long string with just concatenation"
            + "will break this way"
            + "because of reasons such as the fact it is too long";

        var someLongVariableName =
            "a really loooooooooooooooong string"
            + someMethodCall("with long args")
            + "really long string";

        var coalesceIsSpecial =
            someValue_________________________
            ?? someOtherValue_______________________
            ?? someOtherValue_______________________;

        coalesceIsSpecial ??=
            someValue_________________________
            ?? someOtherValue_______________________
            ?? someOtherValue_______________________;

        CallSomeLongMethodWithStringConcatenationThatShouldNotBreak(
            csharpDirectory + ".generated.cs",
            output.ToString()
        );

        var commentsDontBreakBinary =
            // shouldn't break next line
            true || false;

        var commentsDontBreakBinary =
            // shouldn't break next line
            // shouldn't break next line
            true || false;

        var directivesDontBreakBinary =
#pragma
            true || false;

        var conditionalIndentation = someBoolean
            ? someLongValue____________________________________
                + someLongValue____________________________________
            : someLongValue____________________________________
                + someLongValue____________________________________;

        if (
            one == two
            || someValue_______________
                == thisWillIndent_______________________________________________________________
        ) { }

        while (
            one == two
            || someValue_______________
                == thisWillIndent_______________________________________________________________
        ) { }

        switch (one == two
            || someValue_______________
                == thisWillIndent_______________________________________________________________)
        { }

        do { }
        while (
            one == two
            || someValue_______________
                == thisWillIndent_______________________________________________________________
        );

        CallMethod(
            "shouldIndentToMakeItClearWhereParametersAre"
                + "someLongString_________________________________",
            "SecondParameter"
        );

        var y = someList.Where(
            o =>
                someLongValue_______________________
                && theseShouldNotIndent_________________
                && theseShouldNotIndent_________________
                    > butThisOneShould_________________________________________
        );

        var someVariable =
            CallMethod(
                someParameter_____________________________________,
                someParameter_____________________________________
            )
            && CallMethod() == someValue;

        if (
            one - two == three
            || one + two == three
            || one * two == three
            || one / two == three
            || one % two == three
            || one != three
            || one < two
            || one > two
            || one <= two
            || one >= two
            || one is null
            || one as Something == null
            || one - two > three
            || someLongThing - someOtherLongThing__________________________________
                > anotherLongThing
        ) { }

        var notIdealSee355 =
            variable.Replace(someParameter_______________________, '.')
                .Replace(someParameter_______________________, '.') + ".";

        UglyButConsistentWithPrettier(
            someValue
                == someLongThing__________________________________________________________________
                || someOtherValue
                    == someOtherLongThing________________________________________________,
            secondParameter
        );
    }
}
