List<int> ids = [];

int[] a = [1, 2, 3, 4, 5, 6, 7, 8];

Span<int> b = ['a', 'b', 'c', 'd', 'e', 'f', 'h', 'i'];

string[] c =
[
    "________________________",
    "________________________",
    "________________________",
    "________________________",
];

int[][] d =
[
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
];

var a = new A { B = [1, 2, 3] };

List<string> items =
[
    // My item
    "Hello",
];

items.AddRange(
    [
        "More really long words",
        "which span multiple lines",
        "are added here",
        "and something bad",
        "happens",
    ]
);

someObject = new SomeObject
{
    Property1 = "one",
    Property2 =
    [
        LongValue________________________________________________,
        LongValue________________________________________________,
    ],
    Property3 = "three",
};

someValue =
[
    LongValue________________________________________________,
    LongValue________________________________________________,
];

CallMethod(parameter1, parameterName: [1, 2]);

CallMethod(
    parameter1,
    parameterName:
    [
        LongValue________________________________________________,
        LongValue________________________________________________,
    ]
);

CallMethod(
    [
        // some comment
    ]
);

CallMethod(
    [
        1,
        // some comment
        // and more
    ]
);

CallMethod(_ =>
    [
        LongValue________________________________________________,
        LongValue________________________________________________,
    ]
);

class MyClass
{
    private readonly List<string> _items;

    public MyClass()
    {
        _items = [];
        _items ??= [];
    }

    public TheoryData<string[]> ArgsData =>
        [
            [],
            [ArgConstants.UseProgramMain],
            [ArgConstants.GlobalInteractivity, ArgConstants.WebAssemblyInteractivity],
            [
                ArgConstants.NoInteractivity,
                ArgConstants.UseProgramMain,
                ArgConstants.NoHttps,
                ArgConstants.Empty,
            ],
        ];

    public ReadOnlySpan<HttpMethod> Methods() =>
        [
            HttpMethod.None,
            HttpMethod.Put,
            HttpMethod.Post,
            HttpMethod.Patch,
            HttpMethod.None,
            HttpMethod.Connect,
        ];

    public List<DayOfWeek> DaysOfWeek { get; } =
        [
            DayOfWeek.Sunday,
            DayOfWeek.Monday,
            DayOfWeek.Tuesday,
            DayOfWeek.Wednesday,
            DayOfWeek.Thursday,
            DayOfWeek.Friday,
            DayOfWeek.Saturday,
        ];
}

[SomeAttribute(
    [
        someValue,
        someValue,
        someValue,
        someValue,
        someValue,
        someValue,
        someValue,
        someValue,
        someValue,
        someValue,
    ]
)]
class ClassName { }

class CastExpressions
{
    void MethodName()
    {
        var x = (string[])[someValue, someValue];

        var x = (string[])
            [longValue________________________________, longValue________________________________];

        var x = (string[])
            [
                longerValue_____________________________________________,
                longerValue_____________________________________________,
            ];

        CallMethod((string[])[someValue, someValue]);

        CallMethod(
            (string[])
                [longValue______________________________, longValue______________________________]
        );

        CallMethod(
            (string[])
                [
                    longerValue_____________________________________________,
                    longerValue_____________________________________________,
                ]
        );
    }
}
