public class ClassRules
{
    public void NeverLineBeforeFirstMember() { }
    public void AlwaysLineBetweenMethods() { }
    public void EvenWithLambdaBody() => "";
    private enum AlwaysLineBeforeEnum
    {
        One,
        Two
    }
    
    private enum NoDoubleLines
    {
        One,
        Two
    }
    private class AlwaysLineBeforeClass { }
    
    private class NoDoubleLines { }
    private interface IAlwaysLineBeforeInterface { }
    
    private interface INoDoubleLines { }
    public ClassRules() { }
    
    public ClassRules() { }
    public ~ClassName() { }
    
    public ~ClassName() { }
    public static implicit operator ClassRules(string s)
    {
        return new Test();
    }
    
    public static implicit operator ClassRules(int i)
    {
        return new Test();
    }
    public record SomeRecord1(string property);
    
    public record SomeRecord2(string property);
    public struct SomeStruct1 { }
    
    public struct SomeStruct2 { }
    static ClassRules operator +(ClassRules a, ClassRules b)
    {
        return a.Add(b);
    }

    static ClassRules operator -(ClassRules a, ClassRules b)
    {
        return a.Subtract(b);
    }

    private string FieldsCanBeGroupedBecauseLinesWillBeKept;
    private string ButLinesAreNotForcedHere;
    // comments force a line
    private string FieldWithComment;
    /* comments force a line */
    private string FieldWithComment;
    /// <summary> comments force a line </summary> ///
    private string FieldWithComment;
    [AttributesForceALine]
    private string FieldWithAttribute;

    // treat the rest of these the same as fields
    // properties
    // indexers
    // event declarations
    // event fields
    // delegate declarations
}
public class LineBeforeClass { }
public interface InterfaceRulesAreLikeClassesButMethodsFollowTheFieldRulesAbove
{
    void NeverLineHere();
    
    void ExistingLineHereIsKept();
    void ButNoLineIsAdded();
    
    // comments do force a line
    void MethodWithComment();

    // how many of these are valid?
    // class
    // event field
    // field - can there even occur?
    // indexer
    // interface
    // method
    // operator
    // property
}

// records
// should be the same as class rules
//   constructor
//   field
//   method
//   property
// structs
//   ClassDeclarationSyntax
//   ConstructorDeclarationSyntax
//   ConversionOperatorDeclarationSyntax
//   DelegateDeclarationSyntax
//   EnumDeclarationSyntax
//   EventDeclarationSyntax
//   EventFieldDeclarationSyntax
//   FieldDeclarationSyntax
//   IndexerDeclarationSyntax
//   MethodDeclarationSyntax
//   OperatorDeclarationSyntax
//   PropertyDeclarationSyntax
//   RecordDeclarationSyntax
//   StructDeclarationSyntax

// TODO what about multiple classes in a namespace? force lines there too!
// TODO what about top level statements? make sure they don't get new lines
// TODO what about regions and other preprocessor directives?
