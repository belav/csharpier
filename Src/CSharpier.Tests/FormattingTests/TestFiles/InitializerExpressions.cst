class ClassName
{
    int[] array = { 1, 2 };

    int[] array =
    {
        "someLongValue_____________________________________",
        "someLongValue_____________________________________"
    };

    int[] array = new int[]
    {
        "someLongValue_____________________________________",
        "someLongValue_____________________________________"
    };

    public IList<string> Value = new List<string> { "one", "two" };

    Dictionary<int, string> dictionary = new Dictionary<int, string>
    {
        { 1, "one_________" },
        { 2, "two_________________" }
    };

    Dictionary<int, string> dictionary = new Dictionary<int, string>
    {
        // should break braces correctly
        { 1, "one" },
        { 2, "two" },
        {
            3,
            "ifThisIsReallyLongItShouldntInsertAnExtraLineAboveIt_________________________________"
        }
    };

    private int[,] arrayInitializerWithoutSize =
    {
        // leading comment should not interfere with the next line breaking
        {
            longValue______________________________,
            longValue______________________________,
            longValue______________________________
        },
        {
            longValue______________________________,
            longValue______________________________,
            longValue______________________________
        }
    };

    void MethodName()
    {
        var x = new SomeClass
        {
            Property1 = true
            // should indent
        };

        var x = new OneProperty { One = true };
        var x = new TwoProperties { One = true, Two = true };
        var x = new ThreeProperties
        {
            One = true,
            Two = true,
            Three = true
        };

        var objectInitializerExpression = new SomeObject()
        {
            ShouldNotBreak = { SomeProperty = SomeValue },
            ShouldBreak =
            {
                SomeOtherProperty = SomeLongValue_______________________________________
            },
            SomeList = new List<SomeObject>()
            {
                new() { SomeProperty = SomeLongValue_____________ },
# pragma this should not affect the breaking of the next line
                new() { SomeProperty = SomeLongValue_____________ },
                new()
                {
                    SomeProperty = SomeOtherValue,
                    AnotherProperty = SomeThirdValue_______________________
                }
            }
        };

        var someObject = new SomeObject
        {
            SomeProperty =
            {
                someOtherValue__________________________________________________________________
            }
        };

        var collectionInitializerExpressions = new SomeObject
        {
            ThisIsACollection = { one, two },
            ThisIsAlsoACollection =
            {
                longerValueThatMakesItBreak______________________,
                longerValueThatMakesItBreak______________________
            },
        };

        var emptyInitializer = new SomeObject[] { };

        var emptyInitializer = new Thing { One = 1 };

        var nestedInitializer = new Thing
        {
            One = 1,
            Two = new Thing { One = 1 }
        };

        var nestedInitializer = new List<Thing>()
        {
            new Thing() { One = 1 },
            new Thing() { One = 1 }
        };

        var nestedInitializer = new Thing
        {
            One = 1,
            Two = new() { One = 1 }
        };

        var nestedInitializer = new List<Thing>()
        {
            new() { One = 1 },
            new() { One = 1 }
        };

        var noBreak = new List<Thing> { new Thing { One = 1 } };
        var yesBreak = new List<Thing>
        {
            new Thing { One = 1, Two = 2 }
        };
        var yesBreak = new List<Thing>
        {
            new Thing { One = 1 },
            Two = 2
        };

        var conditionalsAndInvocations = new List<SomeObject>
        {
            this.CallSomeMethod________________________________________()
                .CallSomeMethod________________________________________()
                ? one
                : two,
            SomeOtherMethod(),
            SomethingElse
                .CallSomeMethod________________________________________()
                .CallSomeMethod________________________________________()
                ? one
                : two,
            SomeOtherMethod(),
            this.CallSomeMethod________________________________________()
                .CallSomeMethod________________________________________(),
            someLongCondition___________________________________
            && someLongCondition___________________________________
                ? one
                : two
        };
    }

    private SomeObject someObject =
        new(someLongParameter___________________)
        {
            SomeProperty = someLongValue____________________________
        };
}
