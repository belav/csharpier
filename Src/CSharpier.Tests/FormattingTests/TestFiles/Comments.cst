// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ClassComments.cst" company="CSharpier">
//   NewLineAfterThis
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

// public class
public class ClassName { }

// other class
class ClassName2 { }

// leading
public // trailing
static // trailing
class // trailing
ClassName2 { }

// this
public
// is
static
// valid
// wtf
class
// yeah
ClassName3 // more trailing
{
    // yeah
    private
    // no
    readonly string Tester = "lajsdf";
}

/// single line doc comment
class ClassName { }

class ClassName
{
    // indents
}

namespace NameSpace
{
    class ClassName
    {
        // indents
    }
}

public class ClassName
{
    // method
    public void MethodName() { }

    // leading modifer
    public // trailing modifier
    static // more trailing
    // leading return type
    void // more trailing
    MethodName2() { }

    public static void MethodName3() { }

    void //other trailing
    MethodName4() { }

    void TrailingCommentTest() // shouldn't space before the next brace
    {
        return;
    }

    void TrailingCommentWithParameters(
        string oasdflkjasdfljkaksjdfasjdkfjslakdf,
        string ljasdfjklaskldfkalsfjkasdf
    ) // shouldn't space before the next brace
    {
        return;
    }

    void MethodName()
    {
        // indents
    }

    IReadOnlyList<IArgument> ICommand.Arguments => Arguments;
    /// <DocumentationCommentDoesNotCauseBreaking />
    IReadOnlyList<IArgument> ICommand.Arguments => Arguments;
    // regular comment does not cause breaking
    IReadOnlyList<IArgument> ICommand.Arguments => Arguments;
}


