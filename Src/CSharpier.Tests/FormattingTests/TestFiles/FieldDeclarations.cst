public class ClassName
{
    private static const string SomeName = "1";
    public SomeClass SomeName;

    private string SomeFieldWithSadsfasdfasdfasdfuperLongNameYeahMan =
        "kljasdfkljasdklfkjlasdfkjaskdlfasasdfasdfasdfasdfdfksdf";

    private static readonly Regex FrontEndResourceRelativePathRegex = new Regex(
        @".*?/Themes/.*?/.*?/(.*)",
        RegexOptions.Compiled
            | RegexOptions.CultureInvariant
            | RegexOptions.IgnoreCase
            | RegexOptions.MakeThisBreak
    );

    private SomeObject SomeLongerName = new SomeObject(
        "lkjasdflkjasdfkljaskldjf",
        "klasldkfaksdfasdfkjasdklf"
    )
    {
        Property1 = 1,
        Property2 = 2
    };

    private LotsOfParametersToCauseBreaking ShortFieldName = new LotsOfParametersToCauseBreaking(
        "someValue",
        "someOtherValue",
        "anotherValue",
        "yetAnotherValue"
    );

    private SomeReallyLongObjectName SomeReallyLongFieldName_____________ =
        new SomeReallyLongObjectName("someValue", "someOtherValue");

    private SomeReallyLongObjectName LongFieldNameAndLongParameters = new SomeReallyLongObjectName(
        "someValue___________________",
        "someOtherValue_____________________________________"
    );

    public ClassName Value = new ClassName
    {
        Property1 = true,
        Property2 = false,
        Property3 = false,
        Property4 = false,
        Property5 = false
    };

    // leading comments
    private static const string SomeName = "1";

    public SomeClass SomeName; // trailing comments

    public System.Text.StringBuilder NamespacedField;

    public static Dictionary<Type, string> PropertiesByType = new Dictionary<
        SomeLongTypeName,
        string
    >();

    public static Dictionary<
        SomeLongTypeName,
        SomeOtherLongTypeName_______________________________
    > PropertiesByType = new Dictionary<
        SomeLongTypeName,
        SomeOtherLongTypeName_______________________________
    >();

    private static readonly Func<SyntaxTrivia, bool> s_isVisualBasicCommentTrivia = (
        syntaxTrivia
    ) => syntaxTrivia.IsKind(VisualBasic.SyntaxKind.CommentTrivia);

    private Func<SomeObjectIn, bool> SomeFieldFunc = (someValue) => true;

    private Func<SomeObjectIn, bool> SomeFieldFunc = (someValue) =>
        SometimesBreaksThisWay(someValue);

    private Func<SomeObjectIn, bool> SomeFieldFunc = (someValue) =>
        OrWhenLongerBreaksThisWay________(someValue);

    private Func<SomeObjectIn_________________________, bool> SomeFieldFuncWithALongName_________ =
        (someValue) => SomeOtherLongerMethod(someValue);

    private Func<
        SomeLongObjectIn__________________________________,
        bool
    > SomeFieldFuncWithALongName = (someValue) => SometimesBreaksThisWay(someValue);

    private Func<
        SomeLongObjectIn__________________________________,
        bool
    > SomeFieldFuncWithALongName = (someValue) =>
        SometimesBreaksThisWay(someValue, SomeOtherLongValue);

    private Func<
        SomeLongObjectIn__________________________________,
        bool
    > SomeFieldFuncWithALongName = (someValue_____________________________) =>
        SometimesBreaksThisWay(someValue, SomeOtherLongValue);

    private Type OmittedTypes = typeof(OmittedTypes<,>);
}

struct S
{
    fixed int field[10];
}
