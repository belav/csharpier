public class ClassName
{
    public void MethodName()
    {
        switch (0)
        {
            case 0:
            case 1:
            {
                break;
            }

            case 1 + 1:
            {
                return;
            }

            case 4:
                var x = 1;
                break;

            default:
            {
                return;
            }
        }

        switch (0)
        {
            case 1:
            case 2:

            default:
                break;
        }

        switch (0)
        {
            case 1:
            {
                goto case 2;
            }
            case 2:
            {
                goto default;
            }
            default:
            {
                return;
            }
        }

        switch (0) { }

        switch (arg)
        {
            case "A" when b > 50:
            case "B" when B < 50:

            case "C______________________________________________________________________"
                  when C == 50:
                return;
            case "D______________________________________________________________________"
                  when D == 50:
            default:
            {
                break;
            }
        }

        switch (emptyBlockInCaseShouldntGetExtraSpace)
        {
            case 1:
            {
                {
                    return 1;
                }
            }
        }

        switch (
            someLongValue
            + someOtherLongValue_________________________________________________________
        )
        {
            default:
                return;
        }

        switch (patternMatching)
        {
            case SomeLongRecursivePattern
            {
                SomeProperty: "                             ",
                SomeOtherProperty: { SomeProperty: One or Two }
            }:
                return 1;
            case SomeShortRecursivePattern { SomeProperty: "" }:
                return 2;
            default:
                break;
        }

        switch (positionalPattern1, positionalPattern2)
        {
            case (SomeValue, _) when !isEquality:
            case (_, SomeValue) when !isEquality:
                return;
        }
    }
}
