#error Error message
#warning Warning new line test

#pragma warning disable 414, 3021
#pragma warning restore 3021
#pragma checksum "file.txt" "{00000000-0000-0000-0000-000000000000}" "2453"
#define foo // Comment in directive
#if foo
#elif bar
#else
#endif
#undef foo
#line 6
#region Region
using static System.Linq.Enumerable;

#endregion

class ClassName { }

public class ClassName
{
    #region Region
    private int x; // trailing comment here shouldn't give extra indent to the endregion after it
    #endregion

    public bool SomeProperty =>
#if !DEBUG
        someValue
        && // trailing comment with endif should work properly
#endif
        someOtherValue;

    void MethodWithOnlyDisabled()
    {
#if DEBUG
        Console.WriteLine("Rosyln does not parse this because DEBUG is not defined");
#endif
    }

    void MethodWithDisabledAfterAnotherStatement()
    {
        var x = 1;
#if DEBUG
        Console.WriteLine("Rosyln does not parse this because DEBUG is not defined");
#endif
    }
}

namespace Namespace
{
#pragma
    using System.Linq;

#pragma
    class ExtraLineChecker { }
#pragma
    class ExtraLineChecker2
    {
#pragma
        void MethodName() { }
    }
}

#region Region

    #region Nested
class ClassName { }
    #endregion Nested

#endregion

#if DIRECTIVES_AROUND_MODIFIERS_BREAK_CORRECTLY
public
#else
internal
#endif
static class ConditionallyPublic { }

class EdgeCases
{
    string RegionsIndentAndNewLineProperly =
        #region one
        @"using System;"
        #endregion one
    ;

    void MethodWithNestedIfsDoesNotGetExtraLineBreak()
    {
#if DEBUG
        var x = 1;
#if NO_EXTRA_BREAK_ABOVE_ME
        x = 2;
#endif
#endif
    }
}

// trivia at end of file should not get extra space in front of it
