using System;
using CSharpier.DocTypes;
using CSharpier.SyntaxPrinter;
using CSharpier.SyntaxPrinter.SyntaxNodePrinters;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace CSharpier.SyntaxPrinter
{
    internal static class Node
    {
        [ThreadStatic]
        private static int depth;

        public static Doc Print(SyntaxNode syntaxNode)
        {
            if (syntaxNode == null)
            {
                return Doc.Null;
            }

            if (depth > 200)
            {
                throw new InTooDeepException();
            }

            if (CSharpierIgnore.IsNodeIgnored(syntaxNode))
            {
                return CSharpierIgnore.PrintWithoutFormatting(syntaxNode);
            }

            depth++;
            try
            {
                switch (syntaxNode)
                {
                    {{- for nodeType in NodeTypes }}
                    case {{ nodeType.SyntaxNodeName }} {{ nodeType.VariableName }}:
                        return {{ nodeType.PrinterName }}.Print({{ nodeType.VariableName }});
                    {{- end }}
                    default:
                        return UnhandledNode.Print(syntaxNode);
                }
            }
            finally
            {
                depth--;
            }
        }
    }
}
