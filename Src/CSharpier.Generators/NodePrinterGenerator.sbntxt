using System;
using System.Diagnostics;
using CSharpier.Core;
using CSharpier.Core.DocTypes;
using CSharpier.Core.CSharp.SyntaxPrinter;
using CSharpier.Core.CSharp.SyntaxPrinter.SyntaxNodePrinters;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace CSharpier.Core.CSharp.SyntaxPrinter
{
    internal static class Node
    {
        public static Doc Print(SyntaxNode? syntaxNode, PrintingContext context)
        {
            if (syntaxNode == null)
            {
                return Doc.Null;
            }

            if (context.State.PrintingDepth > 200)
            {
                throw new InTooDeepException();
            }

            if (CSharpierIgnore.IsNodeIgnored(syntaxNode))
            {
                return CSharpierIgnore.PrintWithoutFormatting(syntaxNode, context).Trim();
            }

            context.State.PrintingDepth++;
            try
            {
                switch ((SyntaxKind)syntaxNode.RawKind)
                {
                    {{- for nodeType in NodeTypes }}
                    case {{ nodeType.SyntaxKinds }}:
                        return {{ nodeType.PrinterName }}.Print(({{ nodeType.SyntaxNodeName }})syntaxNode, context);
                    {{- end }}
                    default:
                        Debug.Assert(syntaxNode is not ({{- SyntaxNodeTypes -}}), $"{syntaxNode.GetType().Name} needs a Printer at Src/CSharpier.Core/CSharp/SyntaxPrinter/SyntaxNodePrinters/{syntaxNode.GetType().Name.Replace("Syntax", "")}.cs");
                        return UnhandledNode.Print(syntaxNode, context);
                }
            }
            finally
            {
                context.State.PrintingDepth--;
            }
        }
    }
}
